#!/bin/sh
    # /etc/init.d/nzedbirc

    ### BEGIN INIT INFO
    # Provides:          nzedbirc
    # Required-Start:    $remote_fs $syslog
    # Required-Stop:     $remote_fs $syslog
    # Default-Start:     2 3 4 5
    # Default-Stop:      0 1 6
    # Short-Description: Service for starting nZEDb bots.
    # Description:       Starts screen instances to run the bots required for scraping PREs and reqids.
    ### END INIT INFO

    # Configuration
    NAME="nzedbirc"
    SCREEN_NAME="masterbot"
    USER="username"
    BASE_DIR="/home/$USER/IRCScraper"
    RUN_SCRIPT="$BASE_DIR/run.sh"
    PIDFILE="/var/run/$NAME.pid"

    # Load LSB functions
    . /lib/lsb/init-functions

    # Check if screen is installed
    if ! command -v screen > /dev/null; then
        log_failure_msg "screen is not installed"
        exit 1
    fi

    # Function to check if service is running
    is_running() {
        if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
            return 0
        else
            return 1
        fi
    }

    # Function to start the service
    do_start() {
        if is_running; then
            log_warning_msg "$NAME is already running"
            return 0
        fi

        log_daemon_msg "Starting $NAME" "$NAME"
        if [ "$(id -u)" = "0" ] && [ "$USER" != "root" ]; then
            # Run as specified user if we're root
            su - $USER -c "cd $BASE_DIR && screen -dmS $SCREEN_NAME sh $RUN_SCRIPT"
        else
            cd $BASE_DIR && screen -dmS $SCREEN_NAME sh $RUN_SCRIPT
        fi

        # Store PID of screen session
        sleep 1
        PID=$(screen -ls | grep $SCREEN_NAME | awk -F. '{print $1}' | tr -d '\t ')
        if [ -n "$PID" ]; then
            echo $PID > "$PIDFILE"
            log_end_msg 0
        else
            log_end_msg 1
            return 1
        fi
    }

    # Function to stop the service
    do_stop() {
        log_daemon_msg "Stopping $NAME" "$NAME"
        if is_running; then
            # Use screen -X to send a 'quit' command rather than killing everything
            if [ "$(id -u)" = "0" ] && [ "$USER" != "root" ]; then
                su - $USER -c "screen -S $SCREEN_NAME -X quit" >/dev/null 2>&1
            else
                screen -S $SCREEN_NAME -X quit >/dev/null 2>&1
            fi

            # Give it time to stop gracefully
            sleep 2

            # If still running, kill it
            if is_running; then
                kill -15 $(cat "$PIDFILE") >/dev/null 2>&1
                sleep 1
            fi

            # Force kill if still running
            if is_running; then
                kill -9 $(cat "$PIDFILE") >/dev/null 2>&1
            fi

            # Remove PID file
            rm -f "$PIDFILE"
            log_end_msg 0
        else
            log_warning_msg "$NAME is not running"
            log_end_msg 0
        fi
    }

    # Function to show service status
    do_status() {
        if is_running; then
            log_success_msg "$NAME is running"
            return 0
        else
            log_failure_msg "$NAME is not running"
            return 3
        fi
    }

    # Main case statement
    case "$1" in
        start)
            do_start
            ;;
        stop)
            do_stop
            ;;
        restart|force-reload)
            do_stop
            sleep 1
            do_start
            ;;
        status)
            do_status
            exit $?
            ;;
        *)
            echo "Usage: $0 {start|stop|restart|force-reload|status}"
            exit 1
            ;;
    esac

    exit 0
